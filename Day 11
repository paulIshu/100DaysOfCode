class Solution {
  public:
       Node* createMap(Node* root, int target, map<Node*, Node*> &nodeToParent) {
        
        Node* res = NULL;
        queue<Node*>q;
        nodeToParent[root] = NULL; // because root don't have parents
        q.push(root);
        
        while(!q.empty()) {
            
            Node* front = q.front();
            q.pop();
            
            if(front->data == target)
                res = front;
            if(front->left) {
                nodeToParent[front->left] = front;
                q.push(front->left);
                
            }
            if(front->right) {
                nodeToParent[front->right] = front;
                q.push(front->right);
            }
                
        }
    return res;
    }
    
    int burnTree(Node* root, map<Node*, Node*> &nodeToParent) {
        
        map<Node*, bool> visited;
        queue<Node*>q;
        // bool flag = 0;
        q.push(root);
        visited[root] = true;
        int ans = 0;
        
        while(!q.empty()) {
            int flag = 0;
            int size = q.size();
            for(int i=0; i<size; i++) {
                
                Node* front = q.front();
                q.pop();
                
                if(front->left && !visited[front->left]) {
                    flag = 1;
                    q.push(front->left);
                    visited[front->left] = 1;
                }
                if(front->right && !visited[front->right]) {
                    flag = 1;
                    q.push(front->right);
                    visited[front->right] = 1;
                }
                if(nodeToParent[front] && !visited[nodeToParent[front]]) {
                    flag = 1;
                    q.push(nodeToParent[front]);
                    visited[nodeToParent[front]] = 1;
                }
            }
        if(flag == 1)
            ans++;
        }
    return ans;
    }
    
  
    int minTime(Node* root, int target) 
    {
        // Your code goes here
        //1. creating node to parent mapping
        //2. finding target node 
        // both 1 and 2done by createMap function done.
        // target node store the res value (target node value from where is starts)
        map<Node*, Node*>nodeToParent;
        Node* targetNode = createMap(root, target, nodeToParent);
        
        //3. sending the target node to count the time 
        int ans=burnTree(targetNode, nodeToParent);
        
        return ans;
    }
};
